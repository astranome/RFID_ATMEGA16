
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000008ac  00000940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  00000946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae5  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dd  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  000036d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011b9  00000000  00000000  000040ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	b8 00       	.word	0x00b8	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	ec ea       	ldi	r30, 0xAC	; 172
  6a:	f8 e0       	ldi	r31, 0x08	; 8
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a6 36       	cpi	r26, 0x66	; 102
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a6 e6       	ldi	r26, 0x66	; 102
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	aa 36       	cpi	r26, 0x6A	; 106
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 4e 04 	call	0x89c	; 0x89c <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  a2:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z5sendzi>:

#include "RFID.h"

void sendz(int c)
{
	while(bit_is_clear(UCSRA,UDRE));// doi den khi bit UDRE = 1
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <_Z5sendzi>
	UDR = c;
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	08 95       	ret

000000b2 <_Z14SPI_MasterInitv>:
}
void SPI_MasterInit(void)
{
	DDRB |= (1<<SCK_PIN)|(1<<MOSI_PIN)|(1<<SS);
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 6b       	ori	r24, 0xB0	; 176
  b6:	87 bb       	out	0x17, r24	; 23
	//PORTB|=(1<<MISO_PIN);
	SPCR |=	(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  b8:	8d b1       	in	r24, 0x0d	; 13
  ba:	81 65       	ori	r24, 0x51	; 81
  bc:	8d b9       	out	0x0d, r24	; 13
	sbi(PORTB,SS);
  be:	c4 9a       	sbi	0x18, 4	; 24
  c0:	08 95       	ret

000000c2 <_Z11_SendStringPc>:
}


void _SendString(char str[])
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	int i =0;
	
	while (str[i] != 0x00)
  c8:	88 81       	ld	r24, Y
  ca:	88 23       	and	r24, r24
  cc:	39 f0       	breq	.+14     	; 0xdc <_Z11_SendStringPc+0x1a>
  ce:	21 96       	adiw	r28, 0x01	; 1
	{
		sendz(str[i]);
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 55 00 	call	0xaa	; 0xaa <_Z5sendzi>

void _SendString(char str[])
{
	int i =0;
	
	while (str[i] != 0x00)
  d6:	89 91       	ld	r24, Y+
  d8:	81 11       	cpse	r24, r1
  da:	fa cf       	rjmp	.-12     	; 0xd0 <_Z11_SendStringPc+0xe>
	{
		sendz(str[i]);
		i++;
	}
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <main>:

MFRC522 abc(4,0);

int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	60 97       	sbiw	r28, 0x10	; 16
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	SPI_MasterInit();
  f6:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z14SPI_MasterInitv>
	
	UBRRL = 103;
  fa:	87 e6       	ldi	r24, 0x67	; 103
  fc:	89 b9       	out	0x09, r24	; 9
	UCSRC =	(1<<URSEL)|(1 << UCSZ1) | (1 << UCSZ0); // k chon UBRRch va chon mode 8bit
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1 << TXEN); //EN rx,tx,ngat
 102:	88 e0       	ldi	r24, 0x08	; 8
 104:	8a b9       	out	0x0a, r24	; 10
	
	abc.begin();
 106:	86 e6       	ldi	r24, 0x66	; 102
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC5225beginEv>
	_SendString("START");
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z11_SendStringPc>
 116:	7e 01       	movw	r14, r28
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	e8 0e       	add	r14, r24
 11c:	f1 1c       	adc	r15, r1
	while(1)
	{
		uint8_t status;
		uint8_t data[MAX_LEN];
		
		status = abc.requestTag(MF1_REQIDL, data);
 11e:	ae 01       	movw	r20, r28
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	66 e2       	ldi	r22, 0x26	; 38
 126:	86 e6       	ldi	r24, 0x66	; 102
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN7MFRC52210requestTagEhPh>
		
		if (status == MI_OK) {
 12e:	81 11       	cpse	r24, r1
 130:	f6 cf       	rjmp	.-20     	; 0x11e <main+0x3c>

			status = abc.antiCollision(data);
 132:	be 01       	movw	r22, r28
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	86 e6       	ldi	r24, 0x66	; 102
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN7MFRC52213antiCollisionEPh>
 140:	8e 01       	movw	r16, r28
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
			
			for (int i = 0; i < 5; i++) {
				sendz(data[i]);
 146:	f8 01       	movw	r30, r16
 148:	81 91       	ld	r24, Z+
 14a:	8f 01       	movw	r16, r30
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <_Z5sendzi>
		
		if (status == MI_OK) {

			status = abc.antiCollision(data);
			
			for (int i = 0; i < 5; i++) {
 152:	0e 15       	cp	r16, r14
 154:	1f 05       	cpc	r17, r15
 156:	b9 f7       	brne	.-18     	; 0x146 <main+0x64>
				sendz(data[i]);
			}

			abc.selectTag(data);
 158:	be 01       	movw	r22, r28
 15a:	6f 5f       	subi	r22, 0xFF	; 255
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	86 e6       	ldi	r24, 0x66	; 102
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN7MFRC5229selectTagEPh>

			// Stop the tag and get ready for reading a new tag.
			abc.haltTag();
 166:	86 e6       	ldi	r24, 0x66	; 102
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN7MFRC5227haltTagEv>
	UCSRC =	(1<<URSEL)|(1 << UCSZ1) | (1 << UCSZ0); // k chon UBRRch va chon mode 8bit
	UCSRB = (1 << TXEN); //EN rx,tx,ngat
	
	abc.begin();
	_SendString("START");
	while(1)
 16e:	d7 cf       	rjmp	.-82     	; 0x11e <main+0x3c>

00000170 <_GLOBAL__sub_I__Z5sendzi>:
		sendz(str[i]);
		i++;
	}
}

MFRC522 abc(4,0);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	64 e0       	ldi	r22, 0x04	; 4
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	86 e6       	ldi	r24, 0x66	; 102
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN7MFRC522C1Eii>
 180:	08 95       	ret

00000182 <_Z18SPI_MasterTransmith>:

uint8_t MFRC522::getFirmwareVersion() {
	uint8_t response;
	response = readFromRegister(0x37);
	return response;
}
 182:	8f b9       	out	0x0f, r24	; 15
 184:	77 9b       	sbis	0x0e, 7	; 14
 186:	fe cf       	rjmp	.-4      	; 0x184 <_Z18SPI_MasterTransmith+0x2>
 188:	8f b1       	in	r24, 0x0f	; 15
 18a:	08 95       	ret

0000018c <_ZN7MFRC522C1Eii>:
 18c:	fc 01       	movw	r30, r24
 18e:	60 83       	st	Z, r22
 190:	71 83       	std	Z+1, r23	; 0x01
 192:	77 b3       	in	r23, 0x17	; 23
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	c9 01       	movw	r24, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_ZN7MFRC522C1Eii+0x14>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <_ZN7MFRC522C1Eii+0x10>
 1a4:	87 2b       	or	r24, r23
 1a6:	87 bb       	out	0x17, r24	; 23
 1a8:	68 b3       	in	r22, 0x18	; 24
 1aa:	c9 01       	movw	r24, r18
 1ac:	00 80       	ld	r0, Z
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <_ZN7MFRC522C1Eii+0x28>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <_ZN7MFRC522C1Eii+0x24>
 1b8:	86 2b       	or	r24, r22
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	42 83       	std	Z+2, r20	; 0x02
 1be:	53 83       	std	Z+3, r21	; 0x03
 1c0:	57 b3       	in	r21, 0x17	; 23
 1c2:	c9 01       	movw	r24, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <_ZN7MFRC522C1Eii+0x3e>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	4a 95       	dec	r20
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <_ZN7MFRC522C1Eii+0x3a>
 1ce:	85 2b       	or	r24, r21
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	02 80       	ldd	r0, Z+2	; 0x02
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <_ZN7MFRC522C1Eii+0x50>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <_ZN7MFRC522C1Eii+0x4c>
 1e0:	28 2b       	or	r18, r24
 1e2:	28 bb       	out	0x18, r18	; 24
 1e4:	08 95       	ret

000001e6 <_ZN7MFRC52215writeToRegisterEhh>:
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	8c 01       	movw	r16, r24
 1f2:	f4 2e       	mov	r15, r20
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	c1 e0       	ldi	r28, 0x01	; 1
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	9e 01       	movw	r18, r28
 1fc:	f8 01       	movw	r30, r16
 1fe:	00 80       	ld	r0, Z
 200:	02 c0       	rjmp	.+4      	; 0x206 <_ZN7MFRC52215writeToRegisterEhh+0x20>
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <_ZN7MFRC52215writeToRegisterEhh+0x1c>
 20a:	82 2f       	mov	r24, r18
 20c:	80 95       	com	r24
 20e:	89 23       	and	r24, r25
 210:	88 bb       	out	0x18, r24	; 24
 212:	86 2f       	mov	r24, r22
 214:	88 0f       	add	r24, r24
 216:	8e 77       	andi	r24, 0x7E	; 126
 218:	0e 94 c1 00 	call	0x182	; 0x182 <_Z18SPI_MasterTransmith>
 21c:	8f 2d       	mov	r24, r15
 21e:	0e 94 c1 00 	call	0x182	; 0x182 <_Z18SPI_MasterTransmith>
 222:	88 b3       	in	r24, 0x18	; 24
 224:	f8 01       	movw	r30, r16
 226:	00 80       	ld	r0, Z
 228:	02 c0       	rjmp	.+4      	; 0x22e <_ZN7MFRC52215writeToRegisterEhh+0x48>
 22a:	cc 0f       	add	r28, r28
 22c:	dd 1f       	adc	r29, r29
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <_ZN7MFRC52215writeToRegisterEhh+0x44>
 232:	c8 2b       	or	r28, r24
 234:	c8 bb       	out	0x18, r28	; 24
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	08 95       	ret

00000242 <_ZN7MFRC52216readFromRegisterEh>:
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	8c 01       	movw	r16, r24
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	c1 e0       	ldi	r28, 0x01	; 1
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	ae 01       	movw	r20, r28
 254:	fc 01       	movw	r30, r24
 256:	00 80       	ld	r0, Z
 258:	02 c0       	rjmp	.+4      	; 0x25e <_ZN7MFRC52216readFromRegisterEh+0x1c>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <_ZN7MFRC52216readFromRegisterEh+0x18>
 262:	94 2f       	mov	r25, r20
 264:	90 95       	com	r25
 266:	92 23       	and	r25, r18
 268:	98 bb       	out	0x18, r25	; 24
 26a:	86 2f       	mov	r24, r22
 26c:	88 0f       	add	r24, r24
 26e:	8e 77       	andi	r24, 0x7E	; 126
 270:	80 68       	ori	r24, 0x80	; 128
 272:	0e 94 c1 00 	call	0x182	; 0x182 <_Z18SPI_MasterTransmith>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 c1 00 	call	0x182	; 0x182 <_Z18SPI_MasterTransmith>
 27c:	98 b3       	in	r25, 0x18	; 24
 27e:	f8 01       	movw	r30, r16
 280:	00 80       	ld	r0, Z
 282:	02 c0       	rjmp	.+4      	; 0x288 <_ZN7MFRC52216readFromRegisterEh+0x46>
 284:	cc 0f       	add	r28, r28
 286:	dd 1f       	adc	r29, r29
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <_ZN7MFRC52216readFromRegisterEh+0x42>
 28c:	c9 2b       	or	r28, r25
 28e:	c8 bb       	out	0x18, r28	; 24
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <_ZN7MFRC5225resetEv>:
	sbi(PORTB,_sad);
	return val;
}

void MFRC522::reset() {
	writeToRegister(CommandReg, MFRC522_SOFTRESET);
 29a:	4f e0       	ldi	r20, 0x0F	; 15
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
 2a2:	08 95       	ret

000002a4 <_ZN7MFRC52210setBitMaskEhh>:
}

void MFRC522::setBitMask(uint8_t addr, uint8_t mask) {
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	8c 01       	movw	r16, r24
 2ae:	d6 2f       	mov	r29, r22
 2b0:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 2b2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current | mask);
 2b6:	48 2f       	mov	r20, r24
 2b8:	4c 2b       	or	r20, r28
 2ba:	6d 2f       	mov	r22, r29
 2bc:	c8 01       	movw	r24, r16
 2be:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <_ZN7MFRC52212clearBitMaskEhh>:

void MFRC522::clearBitMask(uint8_t addr, uint8_t mask) {
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	8c 01       	movw	r16, r24
 2d6:	d6 2f       	mov	r29, r22
 2d8:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 2da:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current & (~mask));
 2de:	c0 95       	com	r28
 2e0:	4c 2f       	mov	r20, r28
 2e2:	48 23       	and	r20, r24
 2e4:	6d 2f       	mov	r22, r29
 2e6:	c8 01       	movw	r24, r16
 2e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <_ZN7MFRC5225beginEv>:

void MFRC522::begin() {
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ec 01       	movw	r28, r24
	sbi(PORTB,_sad);
 2fc:	28 b3       	in	r18, 0x18	; 24
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 80       	ld	r0, Y
 304:	02 c0       	rjmp	.+4      	; 0x30a <_ZN7MFRC5225beginEv+0x14>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <_ZN7MFRC5225beginEv+0x10>
 30e:	82 2b       	or	r24, r18
 310:	88 bb       	out	0x18, r24	; 24

	reset();
 312:	ce 01       	movw	r24, r28
 314:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN7MFRC5225resetEv>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms == 3390 * 48 / 6.78
	writeToRegister(TModeReg, 0x8D);       // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 318:	4d e8       	ldi	r20, 0x8D	; 141
 31a:	6a e2       	ldi	r22, 0x2A	; 42
 31c:	ce 01       	movw	r24, r28
 31e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TPrescalerReg, 0x3E);  // TModeReg[3..0] + TPrescalerReg
 322:	4e e3       	ldi	r20, 0x3E	; 62
 324:	6b e2       	ldi	r22, 0x2B	; 43
 326:	ce 01       	movw	r24, r28
 328:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegL, 30);		//48
 32c:	4e e1       	ldi	r20, 0x1E	; 30
 32e:	6d e2       	ldi	r22, 0x2D	; 45
 330:	ce 01       	movw	r24, r28
 332:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegH, 0);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	6c e2       	ldi	r22, 0x2C	; 44
 33a:	ce 01       	movw	r24, r28
 33c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	writeToRegister(TxAutoReg, 0x40);      // 100%ASK
 340:	40 e4       	ldi	r20, 0x40	; 64
 342:	65 e1       	ldi	r22, 0x15	; 21
 344:	ce 01       	movw	r24, r28
 346:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(ModeReg, 0x3D);        // CRC initial value 0x6363
 34a:	4d e3       	ldi	r20, 0x3D	; 61
 34c:	61 e1       	ldi	r22, 0x11	; 17
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
 354:	43 e0       	ldi	r20, 0x03	; 3
 356:	64 e1       	ldi	r22, 0x14	; 20
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7MFRC52210setBitMaskEhh>
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <_ZN7MFRC52210commandTagEhPhiS0_Pi>:

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
 364:	5f 92       	push	r5
 366:	6f 92       	push	r6
 368:	7f 92       	push	r7
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	6c 01       	movw	r12, r24
 384:	56 2e       	mov	r5, r22
 386:	c4 2f       	mov	r28, r20
 388:	d5 2f       	mov	r29, r21
 38a:	49 01       	movw	r8, r18
 38c:	37 01       	movw	r6, r14
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	68 17       	cp	r22, r24
 392:	09 f4       	brne	.+2      	; 0x396 <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x32>
 394:	c2 c0       	rjmp	.+388    	; 0x51a <__stack+0xbb>
 396:	9e e0       	ldi	r25, 0x0E	; 14
 398:	69 13       	cpse	r22, r25
 39a:	08 c0       	rjmp	.+16     	; 0x3ac <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x48>
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
 39c:	68 94       	set
 39e:	ff 24       	eor	r15, r15
 3a0:	f4 f8       	bld	r15, 4
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
		case MFRC522_AUTHENT:
		irqEn = 0x12;
 3a2:	0f 2e       	mov	r0, r31
 3a4:	f2 e1       	ldi	r31, 0x12	; 18
 3a6:	ef 2e       	mov	r14, r31
 3a8:	f0 2d       	mov	r31, r0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x4c>
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 3ac:	f1 2c       	mov	r15, r1
	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
 3ae:	e1 2c       	mov	r14, r1
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 3b0:	4e 2d       	mov	r20, r14
 3b2:	40 68       	ori	r20, 0x80	; 128
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	c6 01       	movw	r24, r12
 3b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 3bc:	40 e8       	ldi	r20, 0x80	; 128
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	c6 01       	movw	r24, r12
 3c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 3c6:	40 e8       	ldi	r20, 0x80	; 128
 3c8:	6a e0       	ldi	r22, 0x0A	; 10
 3ca:	c6 01       	movw	r24, r12
 3cc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	c6 01       	movw	r24, r12
 3d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 3da:	18 14       	cp	r1, r8
 3dc:	19 04       	cpc	r1, r9
 3de:	7c f4       	brge	.+30     	; 0x3fe <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x9a>
 3e0:	ac 2e       	mov	r10, r28
 3e2:	bd 2e       	mov	r11, r29
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
 3e8:	f5 01       	movw	r30, r10
 3ea:	41 91       	ld	r20, Z+
 3ec:	5f 01       	movw	r10, r30
 3ee:	69 e0       	ldi	r22, 0x09	; 9
 3f0:	c6 01       	movw	r24, r12
 3f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 3f6:	21 96       	adiw	r28, 0x01	; 1
 3f8:	c8 15       	cp	r28, r8
 3fa:	d9 05       	cpc	r29, r9
 3fc:	ac f3       	brlt	.-22     	; 0x3e8 <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x84>
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 3fe:	45 2d       	mov	r20, r5
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	c6 01       	movw	r24, r12
 404:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	if (cmd == MFRC522_TRANSCEIVE) {
 408:	fc e0       	ldi	r31, 0x0C	; 12
 40a:	5f 12       	cpse	r5, r31
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		setBitMask(BitFramingReg, 0x80);  // StartSend=1, transmission of data starts
 40e:	40 e8       	ldi	r20, 0x80	; 128
 410:	6d e0       	ldi	r22, 0x0D	; 13
 412:	c6 01       	movw	r24, r12
 414:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7MFRC52210setBitMaskEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 418:	8f e0       	ldi	r24, 0x0F	; 15
 41a:	97 e2       	ldi	r25, 0x27	; 39
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 424:	64 e0       	ldi	r22, 0x04	; 4
 426:	c6 01       	movw	r24, r12
 428:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 42c:	b8 2e       	mov	r11, r24
 42e:	c8 e1       	ldi	r28, 0x18	; 24
 430:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 432:	9f 2d       	mov	r25, r15
 434:	91 60       	ori	r25, 0x01	; 1
 436:	f9 2e       	mov	r15, r25
 438:	0e c0       	rjmp	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43a:	ef e0       	ldi	r30, 0x0F	; 15
 43c:	f7 e2       	ldi	r31, 0x27	; 39
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 446:	64 e0       	ldi	r22, 0x04	; 4
 448:	c6 01       	movw	r24, r12
 44a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 44e:	b8 2e       	mov	r11, r24
 450:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 452:	09 f4       	brne	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	82 c0       	rjmp	.+260    	; 0x55a <__stack+0xfb>
 456:	8f 2d       	mov	r24, r15
 458:	8b 21       	and	r24, r11
 45a:	79 f3       	breq	.-34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 45c:	86 c0       	rjmp	.+268    	; 0x56a <__stack+0x10b>

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
			status = MI_OK;
 45e:	8e 2d       	mov	r24, r14
 460:	81 70       	andi	r24, 0x01	; 1
 462:	b8 22       	and	r11, r24
 464:	d1 e0       	ldi	r29, 0x01	; 1
 466:	c0 e0       	ldi	r28, 0x00	; 0
 468:	09 f4       	brne	.+2      	; 0x46c <__stack+0xd>
 46a:	d0 e0       	ldi	r29, 0x00	; 0
			if (n & irqEn & 0x01) {
				status = MI_NOTAGERR;
			}

			if (cmd == MFRC522_TRANSCEIVE) {
 46c:	fc e0       	ldi	r31, 0x0C	; 12
 46e:	5f 12       	cpse	r5, r31
 470:	8a c0       	rjmp	.+276    	; 0x586 <__stack+0x127>
				n = readFromRegister(FIFOLevelReg);
 472:	6a e0       	ldi	r22, 0x0A	; 10
 474:	c6 01       	movw	r24, r12
 476:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 47a:	f8 2e       	mov	r15, r24
				lastBits = readFromRegister(ControlReg) & 0x07;
 47c:	6c e0       	ldi	r22, 0x0C	; 12
 47e:	c6 01       	movw	r24, r12
 480:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 484:	28 2f       	mov	r18, r24
 486:	27 70       	andi	r18, 0x07	; 7
				if (lastBits) {
 488:	79 f0       	breq	.+30     	; 0x4a8 <__stack+0x49>
					*rlen = (n-1)*8 + lastBits;
 48a:	8f 2d       	mov	r24, r15
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	82 0f       	add	r24, r18
 49e:	91 1d       	adc	r25, r1
 4a0:	f3 01       	movw	r30, r6
 4a2:	91 83       	std	Z+1, r25	; 0x01
 4a4:	80 83       	st	Z, r24
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <__stack+0x5f>
					} else {
					*rlen = n*8;
 4a8:	8f 2d       	mov	r24, r15
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	f3 01       	movw	r30, r6
 4ba:	91 83       	std	Z+1, r25	; 0x01
 4bc:	80 83       	st	Z, r24
				}

				if (n == 0) {
 4be:	ff 20       	and	r15, r15
 4c0:	51 f0       	breq	.+20     	; 0x4d6 <__stack+0x77>
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 4c2:	8f 2d       	mov	r24, r15
 4c4:	81 31       	cpi	r24, 0x11	; 17
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <__stack+0x6b>
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	a8 2e       	mov	r10, r24
 4cc:	b1 2c       	mov	r11, r1
 4ce:	1a 14       	cp	r1, r10
 4d0:	1b 04       	cpc	r1, r11
 4d2:	24 f0       	brlt	.+8      	; 0x4dc <__stack+0x7d>
 4d4:	58 c0       	rjmp	.+176    	; 0x586 <__stack+0x127>
 4d6:	aa 24       	eor	r10, r10
 4d8:	a3 94       	inc	r10
 4da:	b1 2c       	mov	r11, r1
 4dc:	e0 2e       	mov	r14, r16
 4de:	f1 2e       	mov	r15, r17
 4e0:	00 e0       	ldi	r16, 0x00	; 0
 4e2:	10 e0       	ldi	r17, 0x00	; 0
					result[i] = readFromRegister(FIFODataReg);
 4e4:	69 e0       	ldi	r22, 0x09	; 9
 4e6:	c6 01       	movw	r24, r12
 4e8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 4ec:	f7 01       	movw	r30, r14
 4ee:	81 93       	st	Z+, r24
 4f0:	7f 01       	movw	r14, r30
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 4f2:	0f 5f       	subi	r16, 0xFF	; 255
 4f4:	1f 4f       	sbci	r17, 0xFF	; 255
 4f6:	0a 15       	cp	r16, r10
 4f8:	1b 05       	cpc	r17, r11
 4fa:	a4 f3       	brlt	.-24     	; 0x4e4 <__stack+0x85>
 4fc:	44 c0       	rjmp	.+136    	; 0x586 <__stack+0x127>
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 4fe:	4c e0       	ldi	r20, 0x0C	; 12
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	c6 01       	movw	r24, r12
 504:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 508:	0f 2e       	mov	r0, r31
 50a:	f0 e3       	ldi	r31, 0x30	; 48
 50c:	ff 2e       	mov	r15, r31
 50e:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 510:	0f 2e       	mov	r0, r31
 512:	f7 e7       	ldi	r31, 0x77	; 119
 514:	ef 2e       	mov	r14, r31
 516:	f0 2d       	mov	r31, r0
 518:	7a cf       	rjmp	.-268    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 51a:	47 ef       	ldi	r20, 0xF7	; 247
 51c:	62 e0       	ldi	r22, 0x02	; 2
 51e:	c6 01       	movw	r24, r12
 520:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 524:	40 e8       	ldi	r20, 0x80	; 128
 526:	64 e0       	ldi	r22, 0x04	; 4
 528:	c6 01       	movw	r24, r12
 52a:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 52e:	40 e8       	ldi	r20, 0x80	; 128
 530:	6a e0       	ldi	r22, 0x0A	; 10
 532:	c6 01       	movw	r24, r12
 534:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	c6 01       	movw	r24, r12
 53e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 542:	18 14       	cp	r1, r8
 544:	19 04       	cpc	r1, r9
 546:	dc f6       	brge	.-74     	; 0x4fe <__stack+0x9f>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 548:	0f 2e       	mov	r0, r31
 54a:	f0 e3       	ldi	r31, 0x30	; 48
 54c:	ff 2e       	mov	r15, r31
 54e:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 550:	0f 2e       	mov	r0, r31
 552:	f7 e7       	ldi	r31, 0x77	; 119
 554:	ef 2e       	mov	r14, r31
 556:	f0 2d       	mov	r31, r0
 558:	43 cf       	rjmp	.-378    	; 0x3e0 <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x7c>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 55a:	40 e8       	ldi	r20, 0x80	; 128
 55c:	6d e0       	ldi	r22, 0x0D	; 13
 55e:	c6 01       	movw	r24, r12
 560:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7MFRC52212clearBitMaskEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
 564:	d2 e0       	ldi	r29, 0x02	; 2
 566:	c0 e0       	ldi	r28, 0x00	; 0
 568:	0e c0       	rjmp	.+28     	; 0x586 <__stack+0x127>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 56a:	40 e8       	ldi	r20, 0x80	; 128
 56c:	6d e0       	ldi	r22, 0x0D	; 13
 56e:	c6 01       	movw	r24, r12
 570:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7MFRC52212clearBitMaskEhh>

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
 574:	66 e0       	ldi	r22, 0x06	; 6
 576:	c6 01       	movw	r24, r12
 578:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 57c:	8d 71       	andi	r24, 0x1D	; 29
 57e:	09 f4       	brne	.+2      	; 0x582 <__stack+0x123>
 580:	6e cf       	rjmp	.-292    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				for (i=0; i<n; i++) {
					result[i] = readFromRegister(FIFODataReg);
				}
			}
			} else {
			status = MI_ERR;
 582:	d2 e0       	ldi	r29, 0x02	; 2
 584:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	return status;
}
 586:	8d 2f       	mov	r24, r29
 588:	9c 2f       	mov	r25, r28
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	bf 90       	pop	r11
 59c:	af 90       	pop	r10
 59e:	9f 90       	pop	r9
 5a0:	8f 90       	pop	r8
 5a2:	7f 90       	pop	r7
 5a4:	6f 90       	pop	r6
 5a6:	5f 90       	pop	r5
 5a8:	08 95       	ret

000005aa <_ZN7MFRC52210requestTagEhPh>:

int MFRC522::requestTag(uint8_t mode, uint8_t *data) {
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <_ZN7MFRC52210requestTagEhPh+0x16>
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	5c 01       	movw	r10, r24
 5c6:	16 2f       	mov	r17, r22
 5c8:	6a 01       	movw	r12, r20
	int status, len;
	writeToRegister(BitFramingReg, 0x07);  // TxLastBists = BitFramingReg[2..0]
 5ca:	47 e0       	ldi	r20, 0x07	; 7
 5cc:	6d e0       	ldi	r22, 0x0D	; 13
 5ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	data[0] = mode;
 5d2:	f6 01       	movw	r30, r12
 5d4:	10 83       	st	Z, r17
	status = commandTag(MFRC522_TRANSCEIVE, data, 1, data, &len);
 5d6:	ce 01       	movw	r24, r28
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	7c 01       	movw	r14, r24
 5dc:	86 01       	movw	r16, r12
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	a6 01       	movw	r20, r12
 5e4:	6c e0       	ldi	r22, 0x0C	; 12
 5e6:	c5 01       	movw	r24, r10
 5e8:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status != MI_OK) || (len != 0x10)) {
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	41 f4       	brne	.+16     	; 0x600 <_ZN7MFRC52210requestTagEhPh+0x56>
 5f0:	29 81       	ldd	r18, Y+1	; 0x01
 5f2:	3a 81       	ldd	r19, Y+2	; 0x02
 5f4:	20 31       	cpi	r18, 0x10	; 16
 5f6:	31 05       	cpc	r19, r1
 5f8:	29 f0       	breq	.+10     	; 0x604 <_ZN7MFRC52210requestTagEhPh+0x5a>
		status = MI_ERR;
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <_ZN7MFRC52210requestTagEhPh+0x5a>
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	90 e0       	ldi	r25, 0x00	; 0
	}

	return status;
}
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	ff 90       	pop	r15
 612:	ef 90       	pop	r14
 614:	df 90       	pop	r13
 616:	cf 90       	pop	r12
 618:	bf 90       	pop	r11
 61a:	af 90       	pop	r10
 61c:	08 95       	ret

0000061e <_ZN7MFRC52213antiCollisionEPh>:

int MFRC522::antiCollision(uint8_t *serial) {
 61e:	af 92       	push	r10
 620:	bf 92       	push	r11
 622:	cf 92       	push	r12
 624:	df 92       	push	r13
 626:	ef 92       	push	r14
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	00 d0       	rcall	.+0      	; 0x634 <_ZN7MFRC52213antiCollisionEPh+0x16>
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	5c 01       	movw	r10, r24
 63a:	6b 01       	movw	r12, r22
	int status, i, len;
	uint8_t check = 0x00;

	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	6d e0       	ldi	r22, 0x0D	; 13
 640:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	serial[0] = MF1_ANTICOLL;
 644:	83 e9       	ldi	r24, 0x93	; 147
 646:	f6 01       	movw	r30, r12
 648:	80 83       	st	Z, r24
	serial[1] = 0x20;
 64a:	80 e2       	ldi	r24, 0x20	; 32
 64c:	81 83       	std	Z+1, r24	; 0x01
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	7c 01       	movw	r14, r24
 654:	86 01       	movw	r16, r12
 656:	22 e0       	ldi	r18, 0x02	; 2
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	a6 01       	movw	r20, r12
 65c:	6c e0       	ldi	r22, 0x0C	; 12
 65e:	c5 01       	movw	r24, r10
 660:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 664:	bc 01       	movw	r22, r24
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
 666:	89 2b       	or	r24, r25
 668:	49 f5       	brne	.+82     	; 0x6bc <_ZN7MFRC52213antiCollisionEPh+0x9e>
	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]

	serial[0] = MF1_ANTICOLL;
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
 66a:	29 81       	ldd	r18, Y+1	; 0x01
 66c:	3a 81       	ldd	r19, Y+2	; 0x02
 66e:	33 23       	and	r19, r19
 670:	14 f4       	brge	.+4      	; 0x676 <_ZN7MFRC52213antiCollisionEPh+0x58>
 672:	29 5f       	subi	r18, 0xF9	; 249
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	35 95       	asr	r19
 678:	27 95       	ror	r18
 67a:	35 95       	asr	r19
 67c:	27 95       	ror	r18
 67e:	35 95       	asr	r19
 680:	27 95       	ror	r18
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 682:	c9 01       	movw	r24, r18
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	18 16       	cp	r1, r24
 688:	19 06       	cpc	r1, r25
 68a:	6c f4       	brge	.+26     	; 0x6a6 <_ZN7MFRC52213antiCollisionEPh+0x88>
 68c:	f6 01       	movw	r30, r12
 68e:	ac 01       	movw	r20, r24
 690:	d6 01       	movw	r26, r12
 692:	a8 0f       	add	r26, r24
 694:	b9 1f       	adc	r27, r25
 696:	90 e0       	ldi	r25, 0x00	; 0
			check ^= serial[i];
 698:	21 91       	ld	r18, Z+
 69a:	92 27       	eor	r25, r18
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 69c:	ea 17       	cp	r30, r26
 69e:	fb 07       	cpc	r31, r27
 6a0:	d9 f7       	brne	.-10     	; 0x698 <_ZN7MFRC52213antiCollisionEPh+0x7a>
 6a2:	9a 01       	movw	r18, r20
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <_ZN7MFRC52213antiCollisionEPh+0x8e>
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
			check ^= serial[i];
		}
		// The checksum should be the same as the one provided from the
		// tag (serial[4]).
		if (check != serial[i]) {
 6ac:	f6 01       	movw	r30, r12
 6ae:	e2 0f       	add	r30, r18
 6b0:	f3 1f       	adc	r31, r19
 6b2:	80 81       	ld	r24, Z
 6b4:	89 17       	cp	r24, r25
 6b6:	11 f0       	breq	.+4      	; 0x6bc <_ZN7MFRC52213antiCollisionEPh+0x9e>
			status = MI_ERR;
 6b8:	62 e0       	ldi	r22, 0x02	; 2
 6ba:	70 e0       	ldi	r23, 0x00	; 0
		}
	}

	return status;
}
 6bc:	cb 01       	movw	r24, r22
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	bf 90       	pop	r11
 6d4:	af 90       	pop	r10
 6d6:	08 95       	ret

000006d8 <_ZN7MFRC52212calculateCRCEPhiS0_>:

void MFRC522::calculateCRC(uint8_t *data, int len, uint8_t *result) {
 6d8:	af 92       	push	r10
 6da:	bf 92       	push	r11
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	8c 01       	movw	r16, r24
 6ee:	5b 01       	movw	r10, r22
 6f0:	6a 01       	movw	r12, r20
 6f2:	79 01       	movw	r14, r18
	int i;
	uint8_t n;

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
 6f4:	44 e0       	ldi	r20, 0x04	; 4
 6f6:	65 e0       	ldi	r22, 0x05	; 5
 6f8:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer
 6fc:	40 e8       	ldi	r20, 0x80	; 128
 6fe:	6a e0       	ldi	r22, 0x0A	; 10
 700:	c8 01       	movw	r24, r16
 702:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7MFRC52210setBitMaskEhh>

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 706:	1c 14       	cp	r1, r12
 708:	1d 04       	cpc	r1, r13
 70a:	5c f4       	brge	.+22     	; 0x722 <_ZN7MFRC52212calculateCRCEPhiS0_+0x4a>
 70c:	e5 01       	movw	r28, r10
 70e:	ca 0c       	add	r12, r10
 710:	db 1c       	adc	r13, r11
		writeToRegister(FIFODataReg, data[i]);
 712:	49 91       	ld	r20, Y+
 714:	69 e0       	ldi	r22, 0x09	; 9
 716:	c8 01       	movw	r24, r16
 718:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 71c:	cc 15       	cp	r28, r12
 71e:	dd 05       	cpc	r29, r13
 720:	c1 f7       	brne	.-16     	; 0x712 <_ZN7MFRC52212calculateCRCEPhiS0_+0x3a>
		writeToRegister(FIFODataReg, data[i]);
	}
	writeToRegister(CommandReg, MFRC522_CALCCRC);
 722:	43 e0       	ldi	r20, 0x03	; 3
 724:	61 e0       	ldi	r22, 0x01	; 1
 726:	c8 01       	movw	r24, r16
 728:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7MFRC52215writeToRegisterEhh>

	// Wait for the CRC calculation to complete.
	i = 0xFF;
	do {
		n = readFromRegister(DivIrqReg);
 72c:	65 e0       	ldi	r22, 0x05	; 5
 72e:	c8 01       	movw	r24, r16
 730:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 734:	ce ef       	ldi	r28, 0xFE	; 254
 736:	d0 e0       	ldi	r29, 0x00	; 0
 738:	06 c0       	rjmp	.+12     	; 0x746 <_ZN7MFRC52212calculateCRCEPhiS0_+0x6e>
 73a:	65 e0       	ldi	r22, 0x05	; 5
 73c:	c8 01       	movw	r24, r16
 73e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 742:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i != 0) && !(n & 0x04));  //CRCIrq = 1
 744:	11 f0       	breq	.+4      	; 0x74a <_ZN7MFRC52212calculateCRCEPhiS0_+0x72>
 746:	82 ff       	sbrs	r24, 2
 748:	f8 cf       	rjmp	.-16     	; 0x73a <_ZN7MFRC52212calculateCRCEPhiS0_+0x62>

	// Read the result from the CRC calculation.
	result[0] = readFromRegister(CRCResultRegL);
 74a:	62 e2       	ldi	r22, 0x22	; 34
 74c:	c8 01       	movw	r24, r16
 74e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 752:	f7 01       	movw	r30, r14
 754:	80 83       	st	Z, r24
	result[1] = readFromRegister(CRCResultRegM);
 756:	61 e2       	ldi	r22, 0x21	; 33
 758:	c8 01       	movw	r24, r16
 75a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7MFRC52216readFromRegisterEh>
 75e:	f7 01       	movw	r30, r14
 760:	81 83       	std	Z+1, r24	; 0x01
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	08 95       	ret

00000778 <_ZN7MFRC5229selectTagEPh>:

uint8_t MFRC522::selectTag(uint8_t *serial) {
 778:	cf 92       	push	r12
 77a:	df 92       	push	r13
 77c:	ef 92       	push	r14
 77e:	ff 92       	push	r15
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	2b 97       	sbiw	r28, 0x0b	; 11
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
 798:	6c 01       	movw	r12, r24
	int i, status, len;
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
 79a:	83 e9       	ldi	r24, 0x93	; 147
 79c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0x70;
 79e:	80 e7       	ldi	r24, 0x70	; 112
 7a0:	8c 83       	std	Y+4, r24	; 0x04
 7a2:	a6 2f       	mov	r26, r22
 7a4:	b7 2f       	mov	r27, r23
 7a6:	fe 01       	movw	r30, r28
 7a8:	35 96       	adiw	r30, 0x05	; 5
 7aa:	9e 01       	movw	r18, r28
 7ac:	26 5f       	subi	r18, 0xF6	; 246
 7ae:	3f 4f       	sbci	r19, 0xFF	; 255
	for (i = 0; i < 5; i++) {
		buffer[i+2] = serial[i];
 7b0:	8d 91       	ld	r24, X+
 7b2:	81 93       	st	Z+, r24
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++) {
 7b4:	e2 17       	cp	r30, r18
 7b6:	f3 07       	cpc	r31, r19
 7b8:	d9 f7       	brne	.-10     	; 0x7b0 <_ZN7MFRC5229selectTagEPh+0x38>
		buffer[i+2] = serial[i];
	}
	calculateCRC(buffer, 7, &buffer[7]);
 7ba:	9e 01       	movw	r18, r28
 7bc:	26 5f       	subi	r18, 0xF6	; 246
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	47 e0       	ldi	r20, 0x07	; 7
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	be 01       	movw	r22, r28
 7c6:	6d 5f       	subi	r22, 0xFD	; 253
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	c6 01       	movw	r24, r12
 7cc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN7MFRC52212calculateCRCEPhiS0_>

	status = commandTag(MFRC522_TRANSCEIVE, buffer, 9, buffer, &len);
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	7c 01       	movw	r14, r24
 7d6:	8e 01       	movw	r16, r28
 7d8:	0d 5f       	subi	r16, 0xFD	; 253
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	29 e0       	ldi	r18, 0x09	; 9
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	a8 01       	movw	r20, r16
 7e2:	6c e0       	ldi	r22, 0x0C	; 12
 7e4:	c6 01       	movw	r24, r12
 7e6:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status == MI_OK) && (len == 0x18)) {
 7ea:	89 2b       	or	r24, r25
 7ec:	31 f4       	brne	.+12     	; 0x7fa <_ZN7MFRC5229selectTagEPh+0x82>
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	9a 81       	ldd	r25, Y+2	; 0x02
 7f2:	48 97       	sbiw	r24, 0x18	; 24
 7f4:	21 f4       	brne	.+8      	; 0x7fe <_ZN7MFRC5229selectTagEPh+0x86>
		sak = buffer[0];
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <_ZN7MFRC5229selectTagEPh+0x88>
	}
	else {
		sak = 0;
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	01 c0       	rjmp	.+2      	; 0x800 <_ZN7MFRC5229selectTagEPh+0x88>
 7fe:	80 e0       	ldi	r24, 0x00	; 0
	}

	return sak;
}
 800:	2b 96       	adiw	r28, 0x0b	; 11
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	08 95       	ret

0000081e <_ZN7MFRC5227haltTagEv>:

int MFRC522::haltTag() {
 81e:	cf 92       	push	r12
 820:	df 92       	push	r13
 822:	ef 92       	push	r14
 824:	ff 92       	push	r15
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN7MFRC5227haltTagEv+0x12>
 830:	00 d0       	rcall	.+0      	; 0x832 <_ZN7MFRC5227haltTagEv+0x14>
 832:	00 d0       	rcall	.+0      	; 0x834 <_ZN7MFRC5227haltTagEv+0x16>
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	6c 01       	movw	r12, r24
	int status, len;
	uint8_t buffer[4];

	buffer[0] = MF1_HALT;
 83a:	80 e5       	ldi	r24, 0x50	; 80
 83c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0;
 83e:	1c 82       	std	Y+4, r1	; 0x04
	calculateCRC(buffer, 2, &buffer[2]);
 840:	9e 01       	movw	r18, r28
 842:	2b 5f       	subi	r18, 0xFB	; 251
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	42 e0       	ldi	r20, 0x02	; 2
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	be 01       	movw	r22, r28
 84c:	6d 5f       	subi	r22, 0xFD	; 253
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	c6 01       	movw	r24, r12
 852:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN7MFRC52212calculateCRCEPhiS0_>
	status = commandTag(MFRC522_TRANSCEIVE, buffer, 4, buffer, &len);
 856:	ce 01       	movw	r24, r28
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	7c 01       	movw	r14, r24
 85c:	8e 01       	movw	r16, r28
 85e:	0d 5f       	subi	r16, 0xFD	; 253
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	24 e0       	ldi	r18, 0x04	; 4
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	a8 01       	movw	r20, r16
 868:	6c e0       	ldi	r22, 0x0C	; 12
 86a:	c6 01       	movw	r24, r12
 86c:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 870:	8c 01       	movw	r16, r24
	clearBitMask(Status2Reg, 0x08);  // turn off encryption
 872:	48 e0       	ldi	r20, 0x08	; 8
 874:	68 e0       	ldi	r22, 0x08	; 8
 876:	c6 01       	movw	r24, r12
 878:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7MFRC52212clearBitMaskEhh>
	return status;
 87c:	c8 01       	movw	r24, r16
 87e:	26 96       	adiw	r28, 0x06	; 6
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	1f 91       	pop	r17
 890:	0f 91       	pop	r16
 892:	ff 90       	pop	r15
 894:	ef 90       	pop	r14
 896:	df 90       	pop	r13
 898:	cf 90       	pop	r12
 89a:	08 95       	ret

0000089c <__tablejump2__>:
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	05 90       	lpm	r0, Z+
 8a2:	f4 91       	lpm	r31, Z
 8a4:	e0 2d       	mov	r30, r0
 8a6:	09 94       	ijmp

000008a8 <_exit>:
 8a8:	f8 94       	cli

000008aa <__stop_program>:
 8aa:	ff cf       	rjmp	.-2      	; 0x8aa <__stop_program>
